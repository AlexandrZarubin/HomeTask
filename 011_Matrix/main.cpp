// Matrix
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <windows.h>

using namespace std;

int main()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    srand(time(NULL));

    const int N = 11;  //размер массива(кол-во строк и столбцов)

    //создаем квадратную матрицу
    int Matrix[N][N]{};
    int Max = -100; //задаем начальное значение заведом меньше, чем у любого элемента
    int Min = 100; //задаем начальное значение заведом больше, чем у любого элемента
    int Summa = 0; //для подсчета сумма выбранных элементов
    int Count = 0; //для подсчета кол-ва выбранных элементов
    float Average = 0.0F; //для подсчета среднего арифметического значения среди выбранных элементов
    char Dark_Side = ' ';//хранит выбоор набора элементов

    //заполнение матрицы значениями
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            //повторная генерация при "выпадениии" ненужных значений, состоящих из одной цифры 
            do
            {
                Matrix[i][j] = rand() % (100 - (-99)) - 99; //-99...99
            } while (Matrix[i][j] > -10 && Matrix[i][j] < 10); //исключаем числа от -9 до 9           
        }
    }

    //цикл работы с матрицей
    while (Dark_Side != '0')
    {
        system("cls");
        cout << "---Программа для работы с квадратной матрицей!---" << endl;
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                if (Matrix[i][j] > 0)cout << " "; //добавляем пробел перед положительным числом
                cout << Matrix[i][j] << " ";
            }
            cout << endl;
        }
        //вывод меню на экран 
        cout << R"(
Выберите вариант матрицы:

    * * *       *           * * *                   * * *
а -   * *   б - * *     в -   *     г -   *     д -   *
        *       * * *                   * * *       * * *

    *   *       *               *       * * *           *
е - * * *   ж - * *     з -   * *   и - * *     к -   * *
    *   *       *               *       *           * * *

0 - Выход
)";
        cin >> Dark_Side;
        if (Dark_Side == '0')break; //выход из цикла while(работы программы)
        //работа с матрицей в зависимости от вариантов
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                switch (Dark_Side)
                {
                case 'А':
                case 'а':
                    //условие варианта а
                    if (i <= j)
                    {
                        //сравниваем текущий элемент с максимальным
                        if (Matrix[i][j] > Max)Max = Matrix[i][j];
                        //сравниваем текущий элемент с минимальным
                        if (Matrix[i][j] < Min)Min = Matrix[i][j];
                        //увеличиваем сумму
                        Summa += Matrix[i][j];
                        //увеличиваем кол-во найденных элементов
                        Count++;
                        //вывод на экран нужного элемента
                        if (Matrix[i][j] > 0)cout << " ";//добавляем пробел перед положительным числом
                        cout << Matrix[i][j] << " ";
                    }
                    else cout << "    ";
                    break;
                case 'Б':
                case 'б':
                    //условие варианта б
                    if (i >= j)
                    {
                        //сравниваем текущий элемент с максимальным
                        if (Matrix[i][j] > Max)Max = Matrix[i][j];
                        //сравниваем текущий элемент с минимальным
                        if (Matrix[i][j] < Min)Min = Matrix[i][j];
                        //увеличиваем сумму
                        Summa += Matrix[i][j];
                        //увеличиваем кол-во найденных элементов
                        Count++;
                        //вывод на экран нужного элемента
                        if (Matrix[i][j] > 0)cout << " ";//добавляем пробел перед положительным числом
                        cout << Matrix[i][j] << " ";
                    }
                    else cout << "    ";
                    break;
                case 'В':
                case 'в':
                    //условие варианта В
                    if (i <= j && i + j <= N - 1)
                    {
                        //сравниваем текущий элемент с максимальным
                        if (Matrix[i][j] > Max)Max = Matrix[i][j];
                        //сравниваем текущий элемент с минимальным
                        if (Matrix[i][j] < Min)Min = Matrix[i][j];
                        //увеличиваем сумму
                        Summa += Matrix[i][j];
                        //увеличиваем кол-во найденных элементов
                        Count++;
                        //вывод на экран нужного элемента
                        if (Matrix[i][j] > 0)cout << " ";//добавляем пробел перед положительным числом
                        cout << Matrix[i][j] << " ";
                    }
                    else cout << "    ";
                    break;
                case 'Г':
                case 'г':
                    //условие варианта г
                    if (i >= j && i + j >= N - 1)
                    {
                        //сравниваем текущий элемент с максимальным
                        if (Matrix[i][j] > Max)Max = Matrix[i][j];
                        //сравниваем текущий элемент с минимальным
                        if (Matrix[i][j] < Min)Min = Matrix[i][j];
                        //увеличиваем сумму
                        Summa += Matrix[i][j];
                        //увеличиваем кол-во найденных элементов
                        Count++;
                        //вывод на экран нужного элемента
                        if (Matrix[i][j] > 0)cout << " ";//добавляем пробел перед положительным числом
                        cout << Matrix[i][j] << " ";
                    }
                    else cout << "    ";
                    break;
                case 'Д':
                case 'д':
                    //условие варианта д
                    if ((i <= j && i + j <= N - 1) || (i >= j && i + j >= N - 1))
                    {
                        //сравниваем текущий элемент с максимальным
                        if (Matrix[i][j] > Max)Max = Matrix[i][j];
                        //сравниваем текущий элемент с минимальным
                        if (Matrix[i][j] < Min)Min = Matrix[i][j];
                        //увеличиваем сумму
                        Summa += Matrix[i][j];
                        //увеличиваем кол-во найденных элементов
                        Count++;
                        //вывод на экран нужного элемента
                        if (Matrix[i][j] > 0)cout << " ";//добавляем пробел перед положительным числом
                        cout << Matrix[i][j] << " ";
                    }
                    else cout << "    ";
                    break;
                case 'Е':
                case 'е':
                    //условие варианта Е
                    if ((i >= j && i + j <= N - 1) || (i <= j && i + j >= N - 1))
                    {
                        //сравниваем текущий элемент с максимальным
                        if (Matrix[i][j] > Max)Max = Matrix[i][j];
                        //сравниваем текущий элемент с минимальным
                        if (Matrix[i][j] < Min)Min = Matrix[i][j];
                        //увеличиваем сумму
                        Summa += Matrix[i][j];
                        //увеличиваем кол-во найденных элементов
                        Count++;
                        //вывод на экран нужного элемента
                        if (Matrix[i][j] > 0)cout << " ";//добавляем пробел перед положительным числом
                        cout << Matrix[i][j] << " ";
                    }
                    else cout << "    ";
                    break;
                case 'Ж':
                case 'ж':
                    //условие варианта Ж
                    if (i >= j && i + j <= N - 1)
                    {
                        //сравниваем текущий элемент с максимальным
                        if (Matrix[i][j] > Max)Max = Matrix[i][j];
                        //сравниваем текущий элемент с минимальным
                        if (Matrix[i][j] < Min)Min = Matrix[i][j];
                        //увеличиваем сумму
                        Summa += Matrix[i][j];
                        //увеличиваем кол-во найденных элементов
                        Count++;
                        //вывод на экран нужного элемента
                        if (Matrix[i][j] > 0)cout << " ";//добавляем пробел перед положительным числом
                        cout << Matrix[i][j] << " ";
                    }
                    else cout << "    ";
                    break;
                case 'З':
                case 'з':
                    //условие варианта З
                    if (i <= j && i + j >= N - 1)
                    {
                        //сравниваем текущий элемент с максимальным
                        if (Matrix[i][j] > Max)Max = Matrix[i][j];
                        //сравниваем текущий элемент с минимальным
                        if (Matrix[i][j] < Min)Min = Matrix[i][j];
                        //увеличиваем сумму
                        Summa += Matrix[i][j];
                        //увеличиваем кол-во найденных элементов
                        Count++;
                        //вывод на экран нужного элемента
                        if (Matrix[i][j] > 0)cout << " ";//добавляем пробел перед положительным числом
                        cout << Matrix[i][j] << " ";
                    }
                    else cout << "    ";
                    break;
                case 'И':
                case 'и':
                    //условие варианта И
                    if (i + j <= N - 1)
                    {
                        //сравниваем текущий элемент с максимальным
                        if (Matrix[i][j] > Max)Max = Matrix[i][j];
                        //сравниваем текущий элемент с минимальным
                        if (Matrix[i][j] < Min)Min = Matrix[i][j];
                        //увеличиваем сумму
                        Summa += Matrix[i][j];
                        //увеличиваем кол-во найденных элементов
                        Count++;
                        //вывод на экран нужного элемента
                        if (Matrix[i][j] > 0)cout << " ";//добавляем пробел перед положительным числом
                        cout << Matrix[i][j] << " ";
                    }
                    else cout << "    ";
                    break;
                case 'К':
                case 'к':
                    //условие варианта К
                    if (i + j >= N - 1)
                    {
                        //сравниваем текущий элемент с максимальным
                        if (Matrix[i][j] > Max)Max = Matrix[i][j];
                        //сравниваем текущий элемент с минимальным
                        if (Matrix[i][j] < Min)Min = Matrix[i][j];
                        //увеличиваем сумму
                        Summa += Matrix[i][j];
                        //увеличиваем кол-во найденных элементов
                        Count++;
                        //вывод на экран нужного элемента
                        if (Matrix[i][j] > 0)cout << " ";//добавляем пробел перед положительным числом
                        cout << Matrix[i][j] << " ";
                    }
                    else cout << "    ";
                    break;
                default:
                    cout << "Неправильно выбран вариант! Проверьте раскладку клавиатуры!" << endl;
                    Dark_Side = 'N'; //'N' - некорректный вариант
                    break; //выход из switch
                }
                if (Dark_Side == 'N')break; //выход из цикла по счетчику j(внутреннего)
            }
            if (Dark_Side == 'N')break; //выход из цикла по счетчику i(внешнего)
            cout << endl;
        }
        if (Dark_Side != 'N') //если был выбран правильный вариант
        {
            cout << "Количество элементов варианта " << Dark_Side << " равно: " << Count << endl;
            cout << "Максимальный элемент варианта " << Dark_Side << " равен: " << Max << endl;
            cout << "Минимальный элемент варианта " << Dark_Side << " равен: " << Min << endl;
            cout << "Сумма элементов варианта " << Dark_Side << " равна: " << Summa << endl;
            Average = (float)Summa / Count; //вычисляем среднее значение
            cout << "Среднее арифметическое значение среди элементов варианта " << Dark_Side << " равно: " << Average << endl;
            //возвращаем переменные в начальное состояние
            Max = -100;
            Min = 100;
            Summa = 0;
            Count = 0;
            Average = 0.0F;
        }
        system("pause");
    }
    cout << "До новых встреч!" << endl;
    Sleep(1500);
}
