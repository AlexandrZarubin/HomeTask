// Visible
#include <iostream>
#include <stdlib.h>

using namespace std;

//прототип функции поиска максимального из двух чисел
int Max(int, int);

//глобальные объекты
int Global; //глобальная переменная инициализируется 0 по умолчанию
const float PI = 3.14F; //глобальная константа должна быть явно инициализированна нужным значением
int Count = 0; //счетчик вызовов функции Max

int main()
{
    system("chcp 1251");
    system("cls");
    Global = 333; //изменение глобальной переменной отразится на всём её дальнейшем использовании
    cout << "Глобальная переменная: " << Global << endl;
    cout << "Глобальная константа: " << PI << endl;
    int X = 15; //локальная переменная функции main, доступна только внутри main
    //cout << A << endl;  переменные А и В доступны только внутри функции Max
    Max(3, 7); //вызов функции изменяет значение глобальной переменной
    cout << "Глобальная переменная: " << Global << endl;
    cout << "Глобальная константа: " << PI << endl;
    system("cls");
    cout << "Глобальная переменная: " << Global << endl;
    cout << "Глобальная константа: " << PI << endl;
    //блок кода - ограничивает область видимости
    {
        cout << "\nНачало области видимости!" << endl;
        cout << "Глобальная переменная: " << Global << endl;
        cout << "Глобальная константа: " << PI << endl;
        cout << "Локальная переменная функции main X: " << X << endl;
        int Y = 100; //локальная переменная блока кода(области видимости)
        cout << "Локальная переменная блока кода Y: " << Y << endl;
        double PI = 3.14159; //локальная переменная блока кода, подменяем собой глобальный объект с тем же именем
        cout << "Локальная переменная блока кода PI: " << PI << endl;
        //double PI = 4; //в одной области видимости не может быть одинаковых имен
        cout << "Глобальная константа: " << ::PI << endl; //прямое обращение к глобальному объекту, 
        //через указание принадлежность к глобальной области видимости
        int X = 222; //локальная переменная блока кода, подменяем собой переменную из функции main
        cout << "Локальная переменная блока кода X: " << X << endl;
        cout << "\nКонец области видимости!" << endl;
    }
    cout << "Глобальная переменная: " << Global << endl;
    cout << "Глобальная константа: " << PI << endl;
    cout << "Локальная переменная функции main X: " << X << endl;
    //cout << "Локальная переменная блока кода Y: " << Y << endl; //переменная Y недоступна

    Count = 777; //изменение глобальной переменной отразится на всём её дальнейшем использовании
    system("cls");
    Max(3, 7);
    Max(3, 7);
    Max(3, 7);
}
//прототип функции поиска максимального из двух чисел
int Max(int A, int B)
{
    //A и B это параметры функции(локальные переменные функции) Max, в которые передаются
    // значения при вызове функции, переменные А и В доступны только внутри функции Max
    //X = 100; //локальная переменная функции main, доступна только внутри main

    /*
    cout << "Функция Max: " << endl;
    //глобальные объекты доступны во всех функция
    cout << "Глобальная переменная: " << Global << endl;
    cout << "Глобальная константа: " << PI << endl;
    Global = 555;
    cout << "Глобальная переменная: " << Global << endl;
    cout << "Глобальная константа: " << PI << endl;
    */

    //Count++; //глобальная переменная в качестве счетчика
    //cout << "Кол-во вызовов функции: " << Count << endl;

    //int CallCount = 0; //локальная переменная функции Max заново инициализируется при каждом вызове функции,
    // и не доступна вне функции

    static int CallCount = 0; //статическая локальная переменная, доступна только внутри функции,
    //инициализируется только один раз при размещении функции в памяти, при вызовах функции
    //заново не инициализируется, а продолжает хранить значение до конца работы всей программы
    CallCount++;
    cout << "Кол-во вызовов функции: " << CallCount << endl;

    if (A > B)return A; //когда A>B
    //else //можно не писать
    if (A == B)return A; //когда А==В
    //else //можно не писать
    return B; //когда B>A
}
