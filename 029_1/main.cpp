// Stroki
#include <iostream>
#include <stdlib.h>
#include <string.h> //библиотека для работы со строками как с масисвами символов из языка С
#include <stdio.h>  //библиотека ввода-вывода языка С
#include <conio.h>  //библиотека ввода-вывода языка С, в том числе и строк для консоли ОС Windows
#include <ctype.h>  //библиотека функций роботы с символами
#include <Windows.h>

using namespace std;

int main()
{
    system("chcp 1251");
    system("cls");

    //char STR[255] = "Привет, Мир!";
    //int A[15] = { 1,2,3,4,5 };
    //char STR1[20] = {'П','р', 'и', 'в', 'е', 'т', ',', ' ', 'М', 'и', 'р', '!'};
    //cout << A << endl;
    //cout << STR << endl; //от начала строки до символа конца строки
    //cout << STR1 << endl;
    //cout << "Привет, Мир!" << endl;
    //// '\0' - нуль-терминатор(символ конца строки)
    //cout << strlen(STR) << endl; //размер без учета символка конца строки
    //cout << strlen(STR1) << endl;
    //cout << STR1 + 8 << endl; //сдвиг указателя позволяет обработь часть строки начиная с символа с указанным индексом
    //system("cls");
    ////cin >> STR; //считает строку до пробела
    ////cin.getline(STR, 255); //считывает строку с пробелами
    ////cout << STR << endl;
    ////gets_s(STR); //считывает строку с пробелами, если массив статический, размер буфера можно не указывать
    ////puts(STR); //вывод строки до \0 с передовом курсора на новую строку
    //cout << "Для завершения работы нажмите любую клавишу!" << endl;
    //int C=_getch(); //запрос ввода любого символа, возвращает код введенного символа
    ////при этом символ на экран не выводится и нетребуется нажатие Enter
    // do
    // {
    // do
    // {
    // }while(C>=32&&C<=126)
    // cout << "Код символа: " <<C<< endl;
    // if(
    // }while(true);
    // else

    char* Buffer = new char[255] {}; //буфер для ввода и анализа строки
    char* Password = nullptr; //указатель на строку для хранения итогового пароля
    bool Upper = false, Lower = false, Digit = false, Symbol = false, Space = false;// , Trash = false;
    //флаги букв верхнего и нижнего регистра, цифр, спец. символов, пробела и ненужных символов
    do
    {
        //сбрасываем флаги
        Upper = false; Lower = false; Digit = false; Symbol = false; Space = false; //Trash=false;
        system("cls");
        cout << R"(Введите пароль, он должен содеражть:
1. Не менее 8 символов
2. Буквы верхнего регистра только латинского алфавита
3. Буквы нижнего  регистра только латинского алфавита
4. Цифры
5. Специальные символы
6. Пробелы и буквы нелатинского алфавита нельзя использовать!
7. Если введен некорректный символ, он не отобразится на экране 
и после звукового сигнала, проверьте раскладку клавиатуры и повторите ввод!
8. Для для выхода нажмите Esc
)";
        for (int i = 0; i < 254;)
        {
            //getchar(); //ввод 1 символа, выводит на экран при вводит требует подтверждения Enter, возвращает код символа
            do
            {

                Buffer[i] = _getch();
                if (Buffer[i] >= 32 && Buffer[i] <= 126) //if (Buffer[i] > 32 && Buffer[i] <= 126) //не включая пробел!
                {
                    putchar(Buffer[i]); //вывод отдельного символа
                    i++; //переходим к следующему символу
                }
                else
                    if (Buffer[i] == 27)
                    {
                        cout << "Выход из программы..." << endl;
                        Sleep(1000);
                        delete[] Buffer;
                        return 1; //exit(1);
                    }
                    else
                        if (Buffer[i] == 8)
                        {
                            if (i > 0)Buffer[i - 1] = '\0';
                            i--;
                            system("cls");
                            cout << R"(Введите пароль, он должен содеражть:
1. Не менее 8 символов
2. Буквы верхнего регистра только латинского алфавита
3. Буквы нижнего  регистра только латинского алфавита
4. Цифры
5. Специальные символы
6. Пробелы и буквы нелатинского алфавита нельзя использовать!
7. Если введен некорректный символ, он не отобразится на экране 
и после звукового сигнала, проверьте раскладку клавиатуры и повторите ввод!
8. Для для выхода нажмите Esc
)";
                            cout << Buffer;
                        }
                        else
                            if (Buffer[i] == 13) //если Enter
                            {
                                Buffer[i] = '\0'; //добавляем \0 в конец строки
                                cout << endl;
                                goto Exit; //конструкция безусловного преехода
                            }
                            else
                            {
                                Beep(500, 200); //звуковой сигнал
                            }
                //if (Buffer[i] == 13)break; //выход из цикла do{}while(true);
            } while (true);
            //if (Buffer[i] == 13)break; //выход из цикла for;
        }
    Exit: //метка для безусловного перехода
        //gets_s(Buffer, 255); //для строки, как указатель char*(для динамической строки) нужно указывать размер буффера для ввода
        if (strlen(Buffer) < 8)
        {
            cout << "Слишком короткий пароль! Повторите ввод!" << endl;
            system("pause");
        }
        else
        {
            //цикл анализа каждого символа в строке
            for (int i = 0; i < strlen(Buffer); i++) //пока счетчик меньше размера строки
                //for (int i = 0; Buffer[i]!='\0'; i++) //пока недойдем до символа конца стироки
            {
                //if(Buffer[i]<32||Buffer[i]>126) //исключаем неподходящие символы
                ////if(Buffer[i]<' ' || Buffer[i]>'~')
                //{
                //    cout << "Некорректные символы!" << endl;
                //    Trash = true;
                //    break; //выход из цикла for
                //}
                if (isspace(Buffer[i])) //if(Buffer[i]==' ') //if(Buffer[i]==32) 
                {
                    cout << "Пробелы нельзя использовать! Повторите ввод всего пароля!" << endl;
                    Space = true;
                    system("pause");
                    break; //выход из цикла for(посимвольной проверки)
                }
                //isalpha(Buffer[i]); //проверка буква ли
                //если буква верхнего регистра
                if (isupper(Buffer[i]))Upper = true;
                //если буква нижнего регистра
                if (islower(Buffer[i]))Lower = true;
                //если цифра
                if (isdigit(Buffer[i]))Digit = true;
                //если спец символ
                if (!isalnum(Buffer[i]))Symbol = true;     //isalnum(Buffer[i]) вернет 0 если не буква и не цифра
            }
            if (!Space) //если выход не по пробелу
                if (Upper && Lower && Digit && Symbol) //пароль надежный
                {
                    //можно добавить сравнение с списоком "раскрытых" (частоиспользуемых) паролей 
                    cout << "Ваш пароль надежный! Для подтверждения введите его повторно: " << endl;
                    Password = new char[strlen(Buffer) + 1] {}; //выделяем память с учетом символа конца строки
                    strcpy_s(Password, strlen(Buffer) + 1, Buffer); //функция копирования одной строки в дургую
                    //Password = Buffer; //так нельзя, так как имя строки - указатель
                    //I Вариант - заново ввести пароль и его повторение
                    gets_s(Buffer, 255);
                    if (strcmp(Password, Buffer)) //вернет 0 если строки равны, 1 если первая строка больше второй и -1 если вторая строка больше первой
                    {
                        cout << "Пароли не совпадают! Повторите ввод оригинального пароля и его подтверждения!" << endl;
                        delete[] Password;
                        Password = nullptr;
                        system("pause");
                        continue; //переход к следующему шагу бесконечного цикла do{}while(true)
                    }

                    //в  любом случае, при корректном вводе повторного пароля, освобождаем память Buffer
                    delete[] Buffer;
                    Buffer = nullptr;
                    //и выходим из бесконечного цикла do {} while (true)
                    break;
                }
                else //иначе пароль не надежный
                {
                    cout << "Ваш пароль недостаточно надежный: " << endl;
                    if (!Upper)cout << "Пароль должен содержать хотя бы одну букву верхнего регистра!" << endl;
                    if (!Lower)cout << "Пароль должен содержать хотя бы одну букву нижнего  регистра!" << endl;
                    if (!Digit)cout << "Пароль должен содержать хотя бы одну цифру!" << endl;
                    if (!Symbol)cout << "Пароль должен содержать хотя бы один специальный символ!" << endl;
                    cout << "Повторите ввод всего пароля!" << endl;
                    system("pause");
                }
        }
    } while (true);
    cout << "Пароль " << Password << " успешно сохранен!" << endl;
    delete[] Password;
    Password = nullptr;
}
