// ConstPointers
#include <iostream>
#include <stdlib.h>

using namespace std;

int main()
{
    system("chcp 1251");
    system("cls");
    int A = 10; //A - переменная
    const int Size = 10; //Size - константа(переменная сконстнатным(неизменяемым, постоянным) значением
    //Size - переменная с модификатором const, который запрещает изменять значение переменной

    int Array1[Size]{}; //массив переменных, типа данных int
    const int Array2[Size]{ 1,2,3,4,5,6,7,8,9,10 }; //массив констант(массив переменных типа данных int,
    //занчение которых нельзя изменить)
    //Array1[2] = 100;
    //Array2[2] = 100;

    //Array1 = &A;     //имени массива нельзя присвоить другой адрес,
    //Array1 = Array2; //потому что имя массива это константный указатель
    //Array1++;
    //Array1 = nullptr;

    //константный указатель на тип данных int, хранящий адрес переменной А
    int* const ptr_A = &A; //обязательно нужно инициализировать адресом нужного объекта
    //константный указатель нельзя изменить, "нацелить" на дургой объект, и даже обнулить
    int B = 3;
    /*ptr_A = &B;
    ptr_A++;
    ptr_A = nullptr;*/
    cout << ptr_A << endl;
    cout << *ptr_A << endl;
    (*ptr_A) = 100; //можно изменять значение объекта(переменной А), адрес которого хранится в константном указателе 
    cout << *ptr_A << endl;
    cout << A << endl;

    int Array3[3]{ 1,2,3 }; //имя  массива - константный указатель
    int* const ptrArray3 = Array3; //инициализируем константный указатель адресом начала массива
    cout << *(ptrArray3 + 2) << endl;
    cout << ptrArray3[2] << endl;
    //Array3++;
    //ptrArray3++;
    system("cls");

    const double PI = 3.14; //константа(переменная с модификатором const)
    const double* ptr_PI = &PI; //указатель на константу(указатель на переменную, чье значение нельзя изменить)
    const int* ptrArray2 = Array2;
    cout << ptr_PI << endl;
    cout << *ptr_PI << endl;
    //PI = 4;
    //*ptr_PI = 4; //нельзя изменить значени объекта(константы PI), адрес которого хранится в указателе на константу
    const double g = 9.8; //указатель на константу можно "перенацелить" на объект того же типа данных и даже обнулить
    ptr_PI = &g;
    //(*ptr_PI) = 10; //но нельзя будет изменить значение этого объекта

    system("cls");

    const float* PTR = nullptr; //нулевой указатель на константу
    float HP = 9.75F; //переменная типа данных float
    PTR = &HP; //присвоив указателю на константу адрес переменной HP
    //мы запрещаем изменение значения этой переменной HP через указаетель PTR
    cout << PTR << endl;
    cout << *PTR << endl;
    //(*PTR) = 4.5F;
    HP = 4.5F;
    cout << *PTR << endl;
    system("cls");

    float Massive[3]{ 1.1F,2.2F,3.3F };
    PTR = Massive; //в указатель на константу PTR присваиваем адрес массива переменных
    cout << *(++PTR) << endl; //можно перемещаться по массиву, изменяя адрес в указателе,
    //(*PTR) = 100.0F; //но нельзя изменить значение элементов массива
    //"доступ на чтение" к элементам массива
    Massive[1] = 100.0F;
    PTR = nullptr; //указатель на константу можно обнулить

    //void F(const int* ptr, int Size);

    system("cls");

    double E = 3.7;

    //константный указатель на константу, нельзя сменить адрес("перенацелить" на другой объект или обнулить),
    //и нельзя изменить значенеи на которое он указывает
    const double* const ptr_E = &E; //обязательно нужно инициализировать адресом нужного объекта
    cout << ptr_E << endl;
    cout << *ptr_E << endl; //можно вывести на экран значение переменное Е через указатель
    cout << *ptr_E + 10 << endl; //можно использовать в вчислениях
    double X = *ptr_E; //можно скопировать значение переменной черз указатель
    //ptr_E++; //НЕЛЬЗЯ изменить значение самого указателя ptr_E(адрес, который он хранит)
    //(*ptr_E) = 100.0; //НЕЛЬЗЯ изменить значение перменной Е через указатель

    cout << E << endl;
    E = -100.0; //саму переменную можно изменить
    cout << E << endl;

    //void F(const int* const ptr, int Size);

}
